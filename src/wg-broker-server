#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (C) Christof Schulze <christof@christofschulze.com>. All Rights Reserved.
#
nic_name="babel-wg"

declare -A INACTIVE

if [[ -z $WAN ]] || [[ -z $MAXCONNECTIONS ]] || [[ -z $BROKERPORT ]] ||
   [[ -z $WIREGUARDPORT ]] || [[ -z $BABELPORT ]] || [[ -z $WG ]]
   [[ -z $MTU ]] || [[ -z $PRIVATEKEY ]] || [[ -z $L3ROAMDSOCK ]] || [[ -z  $MMFDSOCK ]]
then
  if [[ -f /etc/wg-broker/config ]]; then
    . /etc/wg-broker/config
  else
    echo "No such file /etc/wg-broker/config. Exiting" >&2 
    exit 1
  fi
fi

EXITING=""

[[ -f $PRIVATEKEY ]] || {
  echo expecting to find wg secret key in $PRIVATEKEY >&2
  exit 1
}
set -x

cleanup() {
  EXITING=true
  rm -f /tmp/wg-broker
  del_interface ${nic_name}
  exit 0
}

trap cleanup exit

get_wg_peers() {
  $WG show ${nic_name} | grep peer |sed 's/peer://g' | tr '\n' ' '
}

get_connection_count() {
  peers=( $(get_wg_peers) )
  echo ${#peers[@]}
}

add_interface() {
  local newdevice="${nic_name}"

  unset INACTIVE[$newdevice]

  ip link add dev $newdevice type wireguard
  ip link set multicast on mtu $MTU dev $newdevice
  devicenumber=${ifname##*-}
  ip a a fe80::$devicenumber/64 dev $newdevice

  # ip6tables -A INPUT -i $newdevice -p udp --dport 6696 -j ACCEPT
  # ip6tables -A INPUT -i $WAN -p udp --dport $freeport -j ACCEPT
  # iptables -A INPUT -i $WAN -p udp --dport $freeport -j ACCEPT
  ip link set up dev $newdevice
  echo add_meshif "$1" | socat - unix:$L3ROAMDSOCK
  echo add_meshif "$1" | socat - unix:$MMFDSOCK
  echo interface $newdevice | timeout 0.2 nc ::1 $BABELPORT >/dev/null
}

del_interface() {
  ip link show "$1" >/dev/null 2>&1 && 
  {
    echo del_meshif "$1" | socat - unix:$L3ROAMDSOCK
    echo del_meshif "$1" | socat - unix:$MMFDSOCK
    echo flush interface $1 | timeout 0.2 nc ::1 $BABELPORT
    ip link del "$1"
  } >&2
}

add_peer() {
  local public_key="$1"
  unset INACTIVE[$public_key]

  $WG set ${nic_name} private-key $PRIVATEKEY listen-port $WIREGUARDPORT peer $public_key allowed-ips ::/0
}

del_peer () {
  local peer="$1"
  $WG ${nic_name} set peer $peer remove 
}

prune_peers() {
  local lines=$WG show ${nic_name} latest-handshakes
  for line in "${lines[@]}"; do
    read -a strarr <<< "$line"
    peer="${strarr[0]}"
    lhandshake="${strarr[1]}"
    age=$(($(date +%s)-lhandshake))
    if  (( (lhandshake > 0 && age > 600) || (lhandshake == 0 && "${INACTIVE[$peer]:-0}" == 1) ))
    then
      del_peer $peer
      return
    elif [[ $((lhandshake)) -eq 0 ]] && [[ -z ${INACTIVE[$peer]} ]]
    then
      INACTIVE[$peer]=1
    fi
  done
}

handle_connection() {
  family=$1
  read -r REPLY

  local pkey=$(jq -r ".pubkey" <<<"$REPLY")

  # TODO this block looks wonky
  if [[ -n $pkey ]]
  then
  
  if [[ ! $(base64 -d <<<"$pkey" 2>/dev/null |wc -c) -eq 32 ]]
  then
    echo "invalid public key" >&2
    return
  fi

  ifname=${nic_name}
  port=${WIREGUARDPORT}

  success=0
  [[ $(get_connection_count) -gt $MAXCONNECTIONS ]]
  then
    response="{\"version\":1, \"error\": { \"code\":1, \"reason\":  \"Remote peer is not accepting additional connections\"} }"
  else
    response="{\"version\":1, \"port\": $port, \"time\": $(date +%s) }"
    success=1
  fi

  echo "working on $ifname, write to peer: $response" >&2
  # del_interface "$ifname"

  [[ "$success" == "1" ]] && add_peer "$pkey"
    echo "$response"
  fi
}

allow_udp_on_wg_interfaces() {
  local port=$1
  ip6tables -nL -v| grep udp | grep ${nic_name} | grep $port | grep -q ACCEPT || \
  ip6tables -I INPUT 1 -i ${nic_name} -p udp --dport $port -j ACCEPT
}

# TODO is this the right place to initialize the wg interface?
add_interface

# TODO prettify this
iptables -nL -v|grep dpt:$BROKERPORT|grep tcp|grep $WAN |grep -q ACCEPT || iptables -A INPUT -i $WAN -p tcp --dport $BROKERPORT -j ACCEPT
ip6tables -nL -v|grep dpt:$BROKERPORT|grep tcp|grep $WAN |grep -q ACCEPT || ip6tables -A INPUT -i $WAN -p tcp --dport $BROKERPORT -j ACCEPT
iptables -nL -v|grep udp |grep $WAN|grep $WIREGUARDPORT -q || iptables -A INPUT -i $WAN -p udp -m multiport --dports $WIREGUARDPORT -j ACCEPT
ip6tables -nL -v|grep udp |grep $WAN|grep $WIREGUARDPORT -q || ip6tables -A INPUT -i $WAN -p udp -m multiport --dports $WIREGUARDPORT -j ACCEPT

# allow babeld, l3roamd and mmfd on wireguard interfaces
allow_udp_on_wg_interfaces 5523
allow_udp_on_wg_interfaces 27275
allow_udp_on_wg_interfaces 6696

rm -f /tmp/wg-broker4
mkfifo /tmp/wg-broker4
rm -f /tmp/wg-broker6
mkfifo /tmp/wg-broker6
rm -f "/var/lock/${0##*/}"

{
while [[ -z $EXITING ]]
do
  prune_peers
  sleep 300
done
} &

{
while [[ -z $EXITING ]]
do
  cat /tmp/wg-broker6 | handle_connection 6 | nc -6 -w 1 -l $BROKERPORT > /tmp/wg-broker6
done
} &

{
while [[ -z $EXITING ]]
do
  cat /tmp/wg-broker4 | handle_connection 4 | nc -4 -w 1 -l $BROKERPORT > /tmp/wg-broker4
done
} &

wait
